# Generated by Django 5.2 on 2025-04-29 02:02

from django.db import migrations
import random

def generate_questions_for_healthcard(card_name):
    """
    Generate 10 unique questions based on the HealthCard name.
    """
    # Base questions for different card types
    delivery_questions = [
        {
            "text": "How well is the team delivering value to customers?",
            "red_description": "We are not meeting customer expectations and delivering little value.",
            "yellow_description": "We are meeting some customer expectations but could improve value delivery.",
            "green_description": "We consistently deliver high value that meets or exceeds customer expectations."
        },
        {
            "text": "How is the quality of the team's deliverables?",
            "red_description": "Frequent defects and quality issues requiring significant rework.",
            "yellow_description": "Occasional quality issues that need addressing.",
            "green_description": "Consistently high quality with minimal defects or issues."
        },
        {
            "text": "How is the team's velocity and predictability?",
            "red_description": "Unpredictable delivery with frequent missed deadlines.",
            "yellow_description": "Somewhat predictable but with occasional delays.",
            "green_description": "Consistent velocity with reliable delivery predictions."
        },
        {
            "text": "How effectively does the team prioritize work?",
            "red_description": "No clear prioritization process, often working on low-value items.",
            "yellow_description": "Basic prioritization exists but could be more strategic.",
            "green_description": "Excellent prioritization focused on highest business value."
        },
        {
            "text": "How well does the team handle delivery impediments?",
            "red_description": "Impediments are ignored or take too long to resolve.",
            "yellow_description": "Some impediments are addressed but not systematically.",
            "green_description": "Proactive identification and quick resolution of impediments."
        },
        {
            "text": "How is the team's estimation accuracy?",
            "red_description": "Estimates are consistently inaccurate by a wide margin.",
            "yellow_description": "Moderate accuracy with some significant deviations.",
            "green_description": "Consistently accurate estimates with minimal deviation."
        },
        {
            "text": "How well does the team manage scope changes?",
            "red_description": "Frequent uncontrolled scope changes disrupting delivery.",
            "yellow_description": "Some process for scope management but not always followed.",
            "green_description": "Effective scope management with proper impact assessment."
        },
        {
            "text": "How is the team's deployment frequency?",
            "red_description": "Infrequent, painful deployments with many issues.",
            "yellow_description": "Regular deployments but with occasional problems.",
            "green_description": "Frequent, smooth deployments with minimal issues."
        },
        {
            "text": "How well does the team document their deliverables?",
            "red_description": "Little to no documentation, creating knowledge gaps.",
            "yellow_description": "Basic documentation exists but is incomplete or outdated.",
            "green_description": "Comprehensive, up-to-date documentation for all deliverables."
        },
        {
            "text": "How effectively does the team gather and incorporate feedback?",
            "red_description": "Rarely seeks or acts on feedback from stakeholders.",
            "yellow_description": "Sometimes collects feedback but inconsistently applies it.",
            "green_description": "Regularly collects and effectively incorporates feedback."
        }
    ]
    
    collaboration_questions = [
        {
            "text": "How effective is the team's collaboration and communication?",
            "red_description": "Poor communication with frequent misunderstandings and conflicts.",
            "yellow_description": "Communication is adequate but could be more consistent and effective.",
            "green_description": "Excellent communication with clear understanding and productive collaboration."
        },
        {
            "text": "How well does the team work across different departments?",
            "red_description": "Siloed work with minimal cross-department collaboration.",
            "yellow_description": "Some cross-department collaboration but with friction.",
            "green_description": "Seamless collaboration across all relevant departments."
        },
        {
            "text": "How effective are the team's meetings?",
            "red_description": "Meetings are unproductive, too long, or poorly facilitated.",
            "yellow_description": "Meetings are somewhat productive but could be improved.",
            "green_description": "Meetings are efficient, focused, and achieve clear outcomes."
        },
        {
            "text": "How well does the team handle conflicts?",
            "red_description": "Conflicts are avoided or escalate inappropriately.",
            "yellow_description": "Some conflicts are resolved but often linger.",
            "green_description": "Conflicts are addressed constructively and resolved effectively."
        },
        {
            "text": "How inclusive is the team's decision-making process?",
            "red_description": "Decisions made by few with little input from others.",
            "yellow_description": "Some team members contribute to decisions.",
            "green_description": "Inclusive decision-making with appropriate involvement."
        },
        {
            "text": "How well does the team communicate with stakeholders?",
            "red_description": "Poor stakeholder communication leading to misalignment.",
            "yellow_description": "Inconsistent stakeholder communication.",
            "green_description": "Regular, clear communication keeping stakeholders well-informed."
        },
        {
            "text": "How effectively does the team use collaboration tools?",
            "red_description": "Minimal or ineffective use of collaboration tools.",
            "yellow_description": "Basic use of tools but not optimizing their potential.",
            "green_description": "Effective use of tools enhancing team collaboration."
        },
        {
            "text": "How well does the team share information internally?",
            "red_description": "Information is hoarded or not shared effectively.",
            "yellow_description": "Some information sharing but gaps exist.",
            "green_description": "Transparent information sharing across the team."
        },
        {
            "text": "How well does the team collaborate remotely when needed?",
            "red_description": "Remote collaboration is difficult and ineffective.",
            "yellow_description": "Basic remote collaboration with some challenges.",
            "green_description": "Seamless remote collaboration when required."
        },
        {
            "text": "How well does the team onboard new members?",
            "red_description": "Poor onboarding leading to slow integration.",
            "yellow_description": "Basic onboarding process with room for improvement.",
            "green_description": "Excellent onboarding enabling quick, effective integration."
        }
    ]
    
    technical_questions = [
        {
            "text": "How well does the team manage technical debt?",
            "red_description": "Technical debt is ignored and accumulating rapidly.",
            "yellow_description": "Some attention to technical debt, but not consistently addressed.",
            "green_description": "Technical debt is actively managed and regularly addressed."
        },
        {
            "text": "How robust is the team's testing approach?",
            "red_description": "Minimal testing with frequent production issues.",
            "yellow_description": "Basic testing but coverage or automation could improve.",
            "green_description": "Comprehensive testing strategy with good automation."
        },
        {
            "text": "How well does the team maintain code quality?",
            "red_description": "Poor code quality with few standards enforced.",
            "yellow_description": "Basic code quality practices but inconsistently applied.",
            "green_description": "High code quality with consistent standards and reviews."
        },
        {
            "text": "How effective is the team's architecture?",
            "red_description": "Architecture has significant issues affecting delivery.",
            "yellow_description": "Architecture works but has some limitations or technical debt.",
            "green_description": "Well-designed architecture supporting current and future needs."
        },
        {
            "text": "How well does the team handle production incidents?",
            "red_description": "Poor incident response with long resolution times.",
            "yellow_description": "Adequate incident response but room for improvement.",
            "green_description": "Excellent incident response with quick resolution and learning."
        },
        {
            "text": "How effective is the team's CI/CD pipeline?",
            "red_description": "Minimal or broken CI/CD practices.",
            "yellow_description": "Basic CI/CD in place but with manual steps or reliability issues.",
            "green_description": "Robust, automated CI/CD enabling frequent, reliable deployments."
        },
        {
            "text": "How well does the team document technical decisions?",
            "red_description": "Little to no documentation of technical decisions.",
            "yellow_description": "Some documentation but inconsistent or incomplete.",
            "green_description": "Clear documentation of key technical decisions and rationale."
        },
        {
            "text": "How effectively does the team monitor applications?",
            "red_description": "Minimal monitoring, reactive to user-reported issues.",
            "yellow_description": "Basic monitoring but gaps in coverage or alerting.",
            "green_description": "Comprehensive monitoring with proactive issue detection."
        },
        {
            "text": "How well does the team manage dependencies?",
            "red_description": "Dependencies are outdated or poorly managed.",
            "yellow_description": "Some dependency management but not systematic.",
            "green_description": "Proactive dependency management and updates."
        },
        {
            "text": "How secure are the team's applications?",
            "red_description": "Security is neglected with known vulnerabilities.",
            "yellow_description": "Basic security practices but gaps remain.",
            "green_description": "Security is prioritized with regular reviews and updates."
        }
    ]
    
    innovation_questions = [
        {
            "text": "How is the team's innovation and continuous improvement?",
            "red_description": "Little to no innovation or improvement initiatives.",
            "yellow_description": "Some innovation but not consistently pursued.",
            "green_description": "Regular innovation with active continuous improvement."
        },
        {
            "text": "How well does the team experiment with new approaches?",
            "red_description": "Resistant to experimentation, sticking to familiar methods.",
            "yellow_description": "Occasional experiments but limited scope or follow-through.",
            "green_description": "Regular, structured experiments with clear learning objectives."
        },
        {
            "text": "How effectively does the team learn from failures?",
            "red_description": "Failures are punished or ignored rather than learned from.",
            "yellow_description": "Some learning from failures but not systematic.",
            "green_description": "Failures are treated as valuable learning opportunities."
        },
        {
            "text": "How well does the team stay current with industry trends?",
            "red_description": "Team is unaware of or ignores relevant industry trends.",
            "yellow_description": "Some awareness but limited application of new trends.",
            "green_description": "Actively tracks and appropriately adopts relevant trends."
        },
        {
            "text": "How effectively does the team implement process improvements?",
            "red_description": "Processes remain static despite known issues.",
            "yellow_description": "Some process improvements but implementation is slow.",
            "green_description": "Regular, effective process improvements based on feedback."
        },
        {
            "text": "How well does the team balance innovation with stability?",
            "red_description": "Either too much risk-taking or too much risk aversion.",
            "yellow_description": "Inconsistent balance between innovation and stability.",
            "green_description": "Appropriate balance maintaining stability while innovating."
        },
        {
            "text": "How effectively does the team share and implement ideas?",
            "red_description": "Ideas are rarely shared or implemented.",
            "yellow_description": "Some ideas are shared but few are implemented.",
            "green_description": "Active idea sharing with effective implementation of good ideas."
        },
        {
            "text": "How well does the team allocate time for innovation?",
            "red_description": "No dedicated time for innovation or improvement.",
            "yellow_description": "Occasional time allocated but often sacrificed.",
            "green_description": "Regular, protected time for innovation and improvement."
        },
        {
            "text": "How effectively does the team measure improvement initiatives?",
            "red_description": "No measurement of improvement initiatives.",
            "yellow_description": "Basic measurement but not consistently applied.",
            "green_description": "Clear metrics for measuring the impact of improvements."
        },
        {
            "text": "How well does the team recognize and reward innovation?",
            "red_description": "Innovation is not recognized or rewarded.",
            "yellow_description": "Some recognition but inconsistent or limited.",
            "green_description": "Innovation is consistently recognized and appropriately rewarded."
        }
    ]
    
    learning_questions = [
        {
            "text": "How is the team's knowledge sharing and skill development?",
            "red_description": "Knowledge is siloed with minimal skill development.",
            "yellow_description": "Some knowledge sharing but could be more systematic.",
            "green_description": "Active knowledge sharing and continuous skill development."
        },
        {
            "text": "How effectively does the team conduct knowledge transfer?",
            "red_description": "Knowledge transfer is rare, creating single points of failure.",
            "yellow_description": "Some knowledge transfer but not comprehensive.",
            "green_description": "Regular, effective knowledge transfer across the team."
        },
        {
            "text": "How well does the team support professional development?",
            "red_description": "Little to no support for professional development.",
            "yellow_description": "Some support but limited resources or opportunities.",
            "green_description": "Strong support with dedicated resources and opportunities."
        },
        {
            "text": "How effectively does the team learn from retrospectives?",
            "red_description": "Retrospectives are skipped or yield no actionable insights.",
            "yellow_description": "Retrospectives happen but follow-through is inconsistent.",
            "green_description": "Regular, effective retrospectives driving real improvements."
        },
        {
            "text": "How well does the team document and share lessons learned?",
            "red_description": "Lessons learned are not documented or shared.",
            "yellow_description": "Some documentation but not easily accessible or referenced.",
            "green_description": "Lessons are well-documented and actively shared and referenced."
        },
        {
            "text": "How effectively does the team cross-train on different skills?",
            "red_description": "No cross-training, creating skill silos and bottlenecks.",
            "yellow_description": "Some cross-training but significant skill gaps remain.",
            "green_description": "Effective cross-training minimizing bottlenecks and dependencies."
        },
        {
            "text": "How well does the team leverage external learning resources?",
            "red_description": "External resources are rarely used for learning.",
            "yellow_description": "Some use of external resources but not strategic.",
            "green_description": "Strategic use of external resources to enhance team capabilities."
        },
        {
            "text": "How effectively does the team mentor junior members?",
            "red_description": "Little to no mentoring of junior team members.",
            "yellow_description": "Some mentoring but not structured or consistent.",
            "green_description": "Effective, structured mentoring accelerating junior member growth."
        },
        {
            "text": "How well does the team share conference or training learnings?",
            "red_description": "Learnings from conferences or training are not shared.",
            "yellow_description": "Some sharing but limited in scope or audience.",
            "green_description": "Comprehensive sharing of valuable external learnings."
        },
        {
            "text": "How effectively does the team maintain technical documentation?",
            "red_description": "Documentation is outdated, incomplete, or non-existent.",
            "yellow_description": "Some documentation exists but has gaps or inconsistencies.",
            "green_description": "Comprehensive, up-to-date documentation supporting the team."
        }
    ]
    
    management_questions = [
        {
            "text": "How well does the team manage dependencies and risks?",
            "red_description": "Dependencies and risks are poorly managed or ignored.",
            "yellow_description": "Some attention to dependencies and risks, but reactive approach.",
            "green_description": "Proactive management of dependencies and risks."
        },
        {
            "text": "How effectively does the team plan and track work?",
            "red_description": "Planning is minimal with poor tracking of progress.",
            "yellow_description": "Basic planning and tracking but could be more effective.",
            "green_description": "Effective planning with clear, up-to-date tracking of progress."
        },
        {
            "text": "How well does the team manage stakeholder expectations?",
            "red_description": "Stakeholder expectations are often mismanaged.",
            "yellow_description": "Some expectation management but misalignments occur.",
            "green_description": "Proactive, effective management of stakeholder expectations."
        },
        {
            "text": "How effectively does the team handle changing priorities?",
            "red_description": "Team struggles to adapt to changing priorities.",
            "yellow_description": "Some ability to adapt but with significant disruption.",
            "green_description": "Effectively adapts to changing priorities with minimal disruption."
        },
        {
            "text": "How well does the team balance short and long-term goals?",
            "red_description": "Focus is either too short-term or too long-term.",
            "yellow_description": "Some balance but tends to favor one timeframe.",
            "green_description": "Appropriate balance between short and long-term objectives."
        },
        {
            "text": "How effectively does the team delegate responsibilities?",
            "red_description": "Poor delegation with work concentrated on few individuals.",
            "yellow_description": "Some delegation but not always to the right people.",
            "green_description": "Effective delegation matching tasks to skills and capacity."
        },
        {
            "text": "How well does the team manage resource allocation?",
            "red_description": "Resources are poorly allocated creating bottlenecks.",
            "yellow_description": "Basic resource allocation but inefficiencies exist.",
            "green_description": "Efficient resource allocation optimizing team productivity."
        },
        {
            "text": "How effectively does the team handle escalations?",
            "red_description": "Escalations are avoided or handled poorly.",
            "yellow_description": "Some escalations are handled effectively, others are not.",
            "green_description": "Appropriate, timely escalations with effective resolution."
        },
        {
            "text": "How well does the team manage project budgets?",
            "red_description": "Poor budget management with frequent overruns.",
            "yellow_description": "Basic budget tracking but some control issues.",
            "green_description": "Effective budget management with appropriate controls."
        },
        {
            "text": "How effectively does the team report on progress?",
            "red_description": "Progress reporting is inaccurate or non-existent.",
            "yellow_description": "Basic reporting but lacks detail or timeliness.",
            "green_description": "Clear, accurate, timely reporting on team progress."
        }
    ]
    
    culture_questions = [
        {
            "text": "How is the overall team morale and engagement?",
            "red_description": "Low morale with disengagement and high turnover.",
            "yellow_description": "Mixed morale with some engagement issues.",
            "green_description": "High morale with strong engagement and team cohesion."
        },
        {
            "text": "How psychologically safe is the team environment?",
            "red_description": "Low psychological safety with fear of speaking up.",
            "yellow_description": "Some psychological safety but room for improvement.",
            "green_description": "High psychological safety where all feel comfortable contributing."
        },
        {
            "text": "How well does the team celebrate successes?",
            "red_description": "Successes are rarely acknowledged or celebrated.",
            "yellow_description": "Some celebration but inconsistent or limited.",
            "green_description": "Regular, meaningful celebration of team and individual successes."
        },
        {
            "text": "How effectively does the team handle work-life balance?",
            "red_description": "Poor work-life balance with frequent overwork.",
            "yellow_description": "Some attention to work-life balance but inconsistent.",
            "green_description": "Healthy work-life balance consistently maintained."
        },
        {
            "text": "How inclusive is the team culture?",
            "red_description": "Low inclusivity with certain voices or perspectives marginalized.",
            "yellow_description": "Some inclusivity but not consistently practiced.",
            "green_description": "Highly inclusive culture valuing diverse perspectives."
        },
        {
            "text": "How well does the team give and receive feedback?",
            "red_description": "Feedback is rare, defensive, or overly critical.",
            "yellow_description": "Some feedback but not always constructive or well-received.",
            "green_description": "Regular, constructive feedback exchanged openly."
        },
        {
            "text": "How effectively does the team recognize individual contributions?",
            "red_description": "Individual contributions are rarely recognized.",
            "yellow_description": "Some recognition but not consistent or equitable.",
            "green_description": "Fair, consistent recognition of individual contributions."
        },
        {
            "text": "How well does the team maintain a positive attitude?",
            "red_description": "Negative attitude prevails, especially during challenges.",
            "yellow_description": "Mixed attitude depending on circumstances.",
            "green_description": "Consistently positive attitude even during difficulties."
        },
        {
            "text": "How effectively does the team support each other?",
            "red_description": "Little mutual support with an 'every person for themselves' mentality.",
            "yellow_description": "Some support but not consistent across the team.",
            "green_description": "Strong mutual support creating a true team environment."
        },
        {
            "text": "How well does the team align with organizational values?",
            "red_description": "Team culture conflicts with organizational values.",
            "yellow_description": "Some alignment but gaps in certain areas.",
            "green_description": "Strong alignment with and embodiment of organizational values."
        }
    ]
    
    # Map card names to question categories
    card_name_lower = card_name.lower()
    
    question_sets = []
    
    if "deliver" in card_name_lower or "value" in card_name_lower or "product" in card_name_lower:
        question_sets.append(delivery_questions)
    
    if "collab" in card_name_lower or "communicat" in card_name_lower or "team" in card_name_lower:
        question_sets.append(collaboration_questions)
    
    if "tech" in card_name_lower or "code" in card_name_lower or "develop" in card_name_lower or "engineer" in card_name_lower:
        question_sets.append(technical_questions)
    
    if "innovat" in card_name_lower or "improve" in card_name_lower or "change" in card_name_lower:
        question_sets.append(innovation_questions)
    
    if "learn" in card_name_lower or "knowledge" in card_name_lower or "skill" in card_name_lower:
        question_sets.append(learning_questions)
    
    if "manage" in card_name_lower or "lead" in card_name_lower or "plan" in card_name_lower:
        question_sets.append(management_questions)
    
    if "culture" in card_name_lower or "morale" in card_name_lower or "engage" in card_name_lower:
        question_sets.append(culture_questions)
    
    # If no specific matches, use a mix of all categories
    if not question_sets:
        question_sets = [delivery_questions, collaboration_questions, technical_questions, 
                         innovation_questions, learning_questions, management_questions, culture_questions]
    
    # Flatten the list of question sets and shuffle
    all_questions = []
    for question_set in question_sets:
        all_questions.extend(question_set)
    
    random.shuffle(all_questions)
    
    # Take the first 10 questions or all if less than 10
    return all_questions[:10]

def create_unique_questions_for_healthcards(apps, schema_editor):
    """
    Create 10 unique questions for each HealthCard based on its name.
    First removes any existing questions for each card.
    """
    HealthCard = apps.get_model('users', 'HealthCard')
    Question = apps.get_model('users', 'Question')
    
    # Get all HealthCards
    healthcards = HealthCard.objects.all()
    
    # For each HealthCard, create 10 unique questions
    for healthcard in healthcards:
        # First delete any existing questions for this HealthCard
        Question.objects.filter(healthcard=healthcard).delete()
        
        # Generate 10 unique questions based on the card name
        questions_to_add = generate_questions_for_healthcard(healthcard.card_name)
        
        # Create the questions
        for question_data in questions_to_add:
            Question.objects.create(
                healthcard=healthcard,
                text=question_data["text"],
                red_description=question_data["red_description"],
                yellow_description=question_data["yellow_description"],
                green_description=question_data["green_description"]
            )

def remove_added_questions(apps, schema_editor):
    """
    Reverse function to remove all questions added by this migration.
    """
    Question = apps.get_model('users', 'Question')
    Question.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0014_vote_is_from_questions_answer'),
    ]

    operations = [
        migrations.RunPython(create_unique_questions_for_healthcards, remove_added_questions),
    ]
